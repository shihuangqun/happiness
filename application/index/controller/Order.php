<?php
namespace app\index\controller;

use app\common\controller\Frontend;
use think\Config;
use think\Db;
use think\Exception;
use think\Request;
use think\Session;

class Order extends Frontend{

    protected $noNeedLogin = ['*'];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 全部订单
     * @param int   user_id 当前用户ID
     * @param int   order_status    付款状态    空则为全部订单
     */
    public function allList(){

        $user = $this->getUserInfo();//获取当用户信息
        $order_status = input('order_status','0,1,2,3,4,5');

        $data = Db::name('order')
            ->order('createtime desc')
            ->where('order_status','in',$order_status)
            ->where('user_id',$user['id'])
            ->alias('o')
            ->join('course c','c.id = o.course_id')
            ->field('o.*,c.title,c.image')
            ->paginate(10,false,['query' => Request::instance()->request()]);
        $grade = Db::name('order')
            ->where('user_id',$user['id'])
            ->where('order_status','neq','0')
            ->alias('o')
            ->join('course c','c.id = o.course_id')
            ->field('type')
            ->find();//查看当前等级

        $is_height = Db::name('order')
            ->where('user_id',$user['id'])
            ->where('order_status','neq','0')
            ->alias('o')
            ->join('course c','c.id = o.course_id')
            ->where('c.type','2')//为2  等于高级用户 则可以免费学习中级
            ->field('type')
            ->find();
        $this->assign([
            'data' => $data,
            'user' => $user,
            'grade' => $grade,
            'is_height' => $is_height
        ]);
        return $this->fetch('index');
    }

//    /**
//     * 待付款
//     */
//
//    public function nopayment(){
//
//        $data = Db::name('order')
//            ->order('createtime desc')
//            ->where('order_status',0)
//            ->paginate(10,false,['query' => Request::instance()->request()]);
//
//        return $data;
//    }
//
//    /**
//     * 已付款
//     */
//
//    public function payment(){
//        $data = Db::name('order')
//            ->order('createtime desc')
//            ->where('order_status',1)
//            ->paginate(10,false,['query' => Request::instance()->request()]);
//
//        return $data;
//    }

    /**
     * 支付确认页面  (作废)
     * @param int   user_id 用户ID
     * @param int   price   产品价格
     * @param int   course_id   当前课程ID
     * @return mixed
     */
    public function confirm($user_id,$course_id){

        $course = Db::name('course')->where('id',$course_id)->field('id,title,image,price')->find();
        $course['user_id'] = $user_id;

        $this->assign([
            'course' => $course
        ]);
        return $this->fetch();
    }

    /**
     *判断当前用户 当前课程 是否有未付款订单 有则禁止下单
     */
    public function isPay(){

        $res = $this->request->except('s');
        $where = [
            'user_id' => $res['user_id'],
            'course_id' => $res['course_id'],
            'order_status' => 0
        ];
        $pay_status = Db::name('order')->where($where)->find();

        if(!empty($pay_status)) return $this->return_msg(400,'你还有该课程未付款的订单!','','/index/order/allList');

        return $this->return_msg('200','success','','/index/pay/payment');

    }

    /**
     * 支付信息 (作废)
     * @param int   user_id 用户ID
     * @param int   price   产品价格
     * @param int   course_id   当前课程ID
     * @return mixed
     */
    public function payDetail(){
        $id = input('id');
        $info = Db::name('order')
            ->where('o.id',$id)
            ->alias('o')
            ->join('course c','c.id = o.course_id')
            ->field('o.*,c.title')
            ->find();


        $attributes = [
            'trade_type'       => 'JSAPI',
            'body'             => $info['title'],
            'detail'           => $info['title'],
            'out_trade_no'     => $info['order_num'],
            'total_fee'        => $info['price'] * 100,
            'notify_url'       => 'https://c.yaoget.cn/addons/wechat/index/notify',
            'openid'           => Session::get('wechat_user')['original']['openid'] ? Session::get('wechat_user')['original']['openid'] : $this->getOpenId(),
        ];
        $pay = new Pay();//实例化支付类
        $config = $pay->prePay($attributes);//唤起支付


        if(Request()->isPost()){
            $res = $this->request->except('s');

            $res['order_num'] = $this->getNumberCode(12);
            $res['createtime'] = time();
            $res['pay_type'] = 1;

            $data = Db::name('order')->insertGetId($res);

            if(!$data) return $this->return_msg(400,'缺失参数');

            return $this->return_msg(200,'下单成功',$data,'/index/order/paydetail');
        }

        $this->assign([
            'info' => $info,
            'config' => $config
        ]);
        return $this->fetch();
    }

    /**
     * 分支
     * @param topid 当前用户上级ID
     * @param num      当前级数
     */
    public function branch($topid,$num=1){

        $info = Db::name('userinfo')->where('id',$topid)->field('id,topid')->select();

        $data = [];
        foreach ($info as $k => $v){

                $v['num'] = $num;
                if($v['topid'] != 0){

                    $v['sub'] = $this->branch($v['topid'],$num+1);

                }

            $data[] = $v;
        }
        return $data;
    }
    /**
     * 获取所有上级   计算佣金比例
     * @param topid 当前用户上级ID
     * @param int   price   付款金额
     */
    public function getAllTop($topid='4',$price='1'){

        $data[] = $this->branch($topid);//获取到所有上级
        $commission = Db::name('commission')->find();//佣金比例

        foreach ($data as $v){
//            dump(111);
            if(!empty($v)){
                foreach ($v as $val){

                    $money = ($price * $commission['one']) / 100;
//                    dump($money);
                    $this->sendTemp($val['id'],$money);

                    if(!empty($val['sub'])){
                        foreach ($val['sub'] as $two){
                            //二级
//                            dump(333);
                            $money = ($price * $commission['two']) / 100;
                            $this->sendTemp($two['id'],$money);


                            if(!empty($two['sub'])){
                                foreach ($two['sub'] as $three){
                                    //三级
//                                    dump(444);
                                    $money = ($price * $commission['three']) / 100;
                                    $this->sendTemp($three['id'],$money);}
                            }
                        }
                    }

                }
            }
        }
    }

    /**
     * 给上级用户推送佣金模版消息
     * @param id int    用户ID
     * @param money int 佣金
     */
    public function sendTemp($id,$money){

        $user = Db::name('userinfo')->where('id',$id)->field('openid,money')->find();//获取当前用户余额
        $res = [
            'id' => $id,
            'money' => $money + $user['money']//佣金+当前余额
        ];

        try{
            $save = Db::name('userinfo')->update($res);//更新用户余额
        }catch (Exception $e){
            return $this->logs('user_money.log','更新余额出错');
        }

//        $temp = new \addons\wechat\controller\Index();
//
//        $template = $this->site['commission_notice'];//佣金提醒模版ID
//        $url = Config::get('HOST').'/index/userinfo/index';
//        $data = [
//            'first' => '',
//            'keywords1' => '',
//            'keywords2' => '',
//            'remark' => ''
//
//        ];
//        $temp->tempMessage($user['openid'],$template,$url,$data);//推送模版消息

    }

    public function aa(){
        $res = [
            '0' => 1,
            '1' =>2
        ];

        $r = [
            '0' => 5,
            '1' =>6
        ];
        $aa = implode(',', array_values($res));
        dump($aa);

    }

    /**
     * 取消订单
     */
    public function cancel(){

        $id = input('id');

        $data = Db::name('order')->where('id',$id)->update(['order_status' => 3]);

        if($data) return $this->return_msg(200,'取消成功');
    }

    /**
     * 立即评价
     */
    public function comment(){

        $course_id = input('course_id');
        $order_id = input('order_id');

        if(Request()->isPost()){
            $res = $this->request->except('s,order_id');
            $order_id = input('order_id');
            $user = $this->getUserInfo();//当前用户信息
            $res['user_id'] = $user['id'];
            $res['createtime'] = time();

            $data = Db::name('comment')->insert($res);
            try{
                $order = Db::name('order')->where('id',$order_id)->update(['order_status' => 2]);//修改当前订单状态为已评价
            }catch (Exception $e){
                return $this->return_msg('400','数据异常，请稍后再试...');
            }

            if($order) return $this->return_msg(200,'评价成功');
        }

        $this->assign([
            'course_id' => $course_id,
            'order_id' => $order_id
        ]);
        return $this->fetch();
    }
}