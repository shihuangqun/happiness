<?php
namespace app\index\controller;

use addons\wechat\library\Config as ConfigService;
use app\common\controller\Frontend;
use EasyWeChat\Foundation\Application;
use think\Session;

class Pay extends Frontend{

    protected $noNeedLogin = ['*'];

    const APPID = 'wx046e68d756c22375';
    const CODEURL = 'https://open.weixin.qq.com/connect/oauth2/authorize?';
    const OPENIDURL = 'https://api.weixin.qq.com/sns/oauth2/access_token?';
    const SECRET = 'a4459548fa12d197886f3af76dc04d56';

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * 获取 prepay_id   并返回支付验证参数
     * @return mixed
     */
    public function prePay($attributes){

        $app = new Application(ConfigService::load());
        $payment = $app->payment;


        $order = new \EasyWeChat\Payment\Order($attributes);
        $result = $payment->prepare($order);
        if ($result->return_code == 'SUCCESS' && $result->result_code == 'SUCCESS'){

            $prepay_id = $result->prepay_id;
//            $config = $payment->configForJSSDKPayment($prepay_id);
            $json = $payment->configForPayment($prepay_id);
            return $json;

        }else if($result->err_code_des == '该订单已支付' && $result->err_code == 'ORDERPAID'){

            $this->error('该订单已支付');
        }

    }


//    public function publicWxPay(){
//        include_once "wxpay/lib/WxPay.Api.php";
//        include_once "wxpay/example/WxPay.JsApiPay.php";
//
//        $mparam = [
//            'body' => '测试订单',
//            'payOrder' => time(),
//            'total' => 1,
//        ];
//        //①、获取用户openid
//        $tools = new \JsApiPay();
//        $openId = Session::get('wechat_user')['original']['openid'] ? Session::get('wechat_user')['original']['openid'] :$tools->GetOpenid();
//        if($mparam!==false){
//            $input = new \WxPayUnifiedOrder();
//            $input->SetBody($mparam['body']);
//            $input->SetAttach($mparam['body']);
//            $input->SetOut_trade_no($mparam['payOrder']);
//            //$input->SetOut_trade_no(WxPayConfig::MCHID.date("YmdHis"));
//            $input->SetTotal_fee($mparam['total']);
//            $input->SetTime_start(date("YmdHis"));
//            $input->SetTime_expire(date("YmdHis", time() + 600));
//            $input->SetGoods_tag($mparam['body']);
//            $input->SetNotify_url('https://' . $_SERVER['SERVER_NAME'] . '/index/pay/ceshi');
//            //$input->SetNotify_url('http://' . $_SERVER['SERVER_NAME'] . '/index.php/orderSeccess');
//            $input->SetTrade_type("JSAPI");
//            $input->SetOpenid($openId);
//            $config = new \WxPayConfig();
//
//            $order = \WxPayApi::unifiedOrder($config,$input);
//            $jsApiParameters = $tools->GetJsApiParameters($order);
//
//            $this->assign(array(
//                'jsApiParameters' => $jsApiParameters,
//            ));
//            return $this->fetch('towxpay');
//        }else{
//            $this->error('创建支付订单异常');
//        }
//    }

    //数组转xml
    function ArrToXml($arr)
    {
        if(!is_array($arr) || count($arr) == 0) return '';

        $xml = "<xml>";
        foreach ($arr as $key=>$val)
        {
            if (is_numeric($val)){
                $xml.="<".$key.">".$val."</".$key.">";
            }else{
                $xml.="<".$key."><![CDATA[".$val."]]></".$key.">";
            }
        }
        $xml.="</xml>";
        return $xml;
    }

    //Xml转数组
    function XmlToArr($xml)
    {
        if($xml == '') return '';
        libxml_disable_entity_loader(true);
        $arr = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);
        return $arr;
    }

    //xml推送
    public function postXml($url,$postfields){

        $ch = curl_init();
        $headers = [
            //"Content-Type:text/html;charset=UTF-8", "Connection: Keep-Alive"
        ];
        $params[CURLOPT_HTTPHEADER] = $headers; //自定义header
        $params[CURLOPT_URL] = $url;    //请求url地址
        $params[CURLOPT_HEADER] = false; //是否返回响应头信息
        $params[CURLOPT_RETURNTRANSFER] = true; //是否将结果返回
        $params[CURLOPT_FOLLOWLOCATION] = true; //是否重定向
        $params[CURLOPT_POST] = true;
        $params[CURLOPT_POSTFIELDS] = $postfields;
        $params[CURLOPT_SSL_VERIFYPEER] = false;
        $params[CURLOPT_SSL_VERIFYHOST] = false;

        curl_setopt_array($ch, $params); //传入curl参数
        $content = curl_exec($ch); //执行
//        echo $content; //输出登录结果
        curl_close($ch); //关闭连接
        return $content;
    }
}